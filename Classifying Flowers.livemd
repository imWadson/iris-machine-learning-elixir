# Make Machines That Learn - Chapter 1

```elixir
Mix.install([
  {:kino, "~> 0.15.3"},
  {:axon, "~> 0.7.0"},
  {:nx, "~> 0.9.2"},
  {:explorer, "~> 0.10.1"}
])
```

## Classifying Flowers

```elixir
require Explorer.DataFrame, as: DF
```

<!-- livebook:{"output":true} -->

```
Explorer.DataFrame
```

### Working with Data

```elixir
iris = Explorer.Datasets.iris()
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [5.1, 4.9, 4.7, 4.6, 5.0, ...]
  sepal_width f64 [3.5, 3.0, 3.2, 3.1, 3.6, ...]
  petal_length f64 [1.4, 1.4, 1.3, 1.5, 1.4, ...]
  petal_width f64 [0.2, 0.2, 0.2, 0.2, 0.2, ...]
  species string ["Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", ...]
>
```

```elixir
cols = ~w(sepal_width sepal_length petal_length petal_width)
normalized_iris = 
  DF.mutate(
    iris,
    for col <- across(^cols) do
      {col.name, (col - mean(col)) / standard_deviation(col)}
    end
  )
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [-0.897673879196766, -1.1392004834649532, -1.3807270877331412,
   -1.5014903898672358, -1.0184371813308595, ...]
  sepal_width f64 [1.0286112808972354, -0.12454037930145855, 0.33672028477801946,
   0.10608995273828045, 1.2592416129369743, ...]
  petal_length f64 [-1.3367940202882493, -1.3367940202882493, -1.393469854952816,
   -1.2801181856236825, -1.3367940202882493, ...]
  petal_width f64 [-1.308592819437958, -1.308592819437958, -1.308592819437958, -1.308592819437958,
   -1.308592819437958, ...]
  species string ["Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", ...]
>
```

### Preparing Data for Training

```elixir
normalized_iris = DF.mutate(normalized_iris, [species: Explorer.Series.cast(species, :category)])
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [-0.897673879196766, -1.1392004834649532, -1.3807270877331412,
   -1.5014903898672358, -1.0184371813308595, ...]
  sepal_width f64 [1.0286112808972354, -0.12454037930145855, 0.33672028477801946,
   0.10608995273828045, 1.2592416129369743, ...]
  petal_length f64 [-1.3367940202882493, -1.3367940202882493, -1.393469854952816,
   -1.2801181856236825, -1.3367940202882493, ...]
  petal_width f64 [-1.308592819437958, -1.308592819437958, -1.308592819437958, -1.308592819437958,
   -1.308592819437958, ...]
  species category ["Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", ...]
>
```

```elixir
shuffled_normalized_iris = DF.shuffle(normalized_iris)
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [-1.2599637855990478, -1.3807270877331412, 1.276065559216926, 1.276065559216926,
   -0.5353839727944832, ...]
  sepal_width f64 [0.7979809488574964, 0.33672028477801946, 0.33672028477801946,
   0.10608995273828045, -0.12454037930145855, ...]
  petal_length f64 [-1.2234423509591155, -1.393469854952816, 1.1002668702881244, 0.6468601929715899,
   0.42015685431332234, ...]
  petal_width f64 [-1.308592819437958, -1.308592819437958, 1.443121053211953, 0.3948491017262728,
   0.3948491017262728, ...]
  species category ["Iris-setosa", "Iris-setosa", "Iris-virginica", "Iris-versicolor",
   "Iris-versicolor", ...]
>
```

```elixir
train_df = DF.slice(shuffled_normalized_iris, 0..119)
test_df = DF.slice(shuffled_normalized_iris, 120..149)
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[30 x 5]
  sepal_length f64 [-1.1392004834649532, 0.7930123506805499, 0.30995914214417364,
   -1.0184371813308595, 1.3968288613510198, ...]
  sepal_width f64 [0.10608995273828045, -0.12454037930145855, -0.5858010433809365,
   0.5673506168177574, 0.33672028477801946, ...]
  petal_length f64 [-1.2801181856236825, 0.8168876969652903, 0.5335085236424562,
   -1.3367940202882493, 0.5335085236424562, ...]
  petal_width f64 [-1.4396268133736678, 1.050019071404823, 0.0017471199191426083,
   -1.308592819437958, 0.26381510779056266, ...]
  species category ["Iris-setosa", "Iris-virginica", "Iris-versicolor", "Iris-setosa",
   "Iris-versicolor", ...]
>
```

```elixir
feature_columns = [
  "sepal_length",
  "sepal_width",
  "petal_length",
  "petal_width"
]

x_train = Nx.stack(train_df[feature_columns], axis: -1)

y_train =
  train_df["species"]
|> Nx.stack(axis: -1)
|> Nx.equal(Nx.iota({1, 3}, axis: -1))

x_test = Nx.stack(test_df[feature_columns], axis: -1)
y_test =
  test_df["species"]
|> Nx.stack(axis: -1)
|> Nx.equal(Nx.iota({1, 3}, axis: -1))
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[30][3]
  [
    [1, 0, 0],
    [0, 0, 1],
    [0, 1, 0],
    [1, 0, 0],
    [0, 1, 0],
    [1, 0, 0],
    [1, 0, 0],
    [0, 0, 1],
    [0, 1, 0],
    [0, 1, 0],
    [0, 0, 1],
    [0, 1, 0],
    [0, 0, 1],
    [0, 1, 0],
    [0, 0, 1],
    [0, 1, 0],
    [1, 0, ...],
    ...
  ]
>
```

```elixir
x_train_f32 = Nx.as_type(x_train, :f32)
y_train_f32 = Nx.as_type(y_train, :f32)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[120][3]
  [
    [1.0, 0.0, 0.0],
    [1.0, 0.0, 0.0],
    [0.0, 0.0, 1.0],
    [0.0, 1.0, 0.0],
    [0.0, 1.0, 0.0],
    [1.0, 0.0, 0.0],
    [0.0, 1.0, 0.0],
    [1.0, 0.0, 0.0],
    [1.0, 0.0, 0.0],
    [0.0, 0.0, 1.0],
    [0.0, 0.0, 1.0],
    [0.0, 1.0, 0.0],
    [0.0, 1.0, 0.0],
    [0.0, 0.0, 1.0],
    [0.0, 1.0, 0.0],
    [0.0, 0.0, 1.0],
    [1.0, 0.0, ...],
    ...
  ]
>
```

```elixir
model = 
  Axon.input("iris_features", shape: {nil, 4})
|> Axon.dense(3, activation: :softmax)

```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"iris_features" => {nil, 4}}
  outputs: "softmax_0"
  nodes: 3
>
```

### Defining the Model

```elixir
Axon.Display.as_graph(model, Nx.template({1, 4}, :f32))
```

<!-- livebook:{"output":true} -->

```mermaid
graph TD;
18[/"iris_features (:input) #Nx.Tensor<
  f32[1][4]
  Nx.TemplateBackend
>"/];
19["dense_0 (:dense) #Nx.Tensor<
  f32[1][3]
  Nx.TemplateBackend
>"];
20["softmax_0 (:softmax) #Nx.Tensor<
  f32[1][3]
  Nx.TemplateBackend
>"];
19 --> 20;
18 --> 19;
```

### Creating an Input Pipeline

```elixir
data_stream = Stream.repeatedly( fn ->
  { x_train_f32, y_train_f32}
end)
```

<!-- livebook:{"output":true} -->

```
#Function<52.82544474/2 in Stream.repeatedly/1>
```

```elixir
trained_model_state =
 model
 |> Axon.Loop.trainer( :categorical_cross_entropy,  :sgd )
 |> Axon.Loop.metric( :accuracy )
 |> Axon.Loop.run(data_stream, %{},  iterations: 500,  epochs: 10)
```

<!-- livebook:{"output":true} -->

```

17:20:09.841 [warning] passing parameter map to initialization is deprecated, use %Axon.ModelState{} instead
Epoch: 0, Batch: 450, accuracy: 0.7348127 loss: 0.6028709
Epoch: 1, Batch: 450, accuracy: 0.8873947 loss: 0.4733187
Epoch: 2, Batch: 450, accuracy: 0.9175134 loss: 0.4146875
Epoch: 3, Batch: 450, accuracy: 0.9294301 loss: 0.3780078
Epoch: 4, Batch: 450, accuracy: 0.9181790 loss: 0.3515046
Epoch: 5, Batch: 450, accuracy: 0.9166641 loss: 0.3308118
Epoch: 6, Batch: 450, accuracy: 0.9333282 loss: 0.3138814
Epoch: 7, Batch: 450, accuracy: 0.9396211 loss: 0.2995965
Epoch: 8, Batch: 450, accuracy: 0.9416718 loss: 0.2872788
Epoch: 9, Batch: 450, accuracy: 0.9467888 loss: 0.2764848
```

<!-- livebook:{"output":true} -->

```
#Axon.ModelState<
  Parameters: 15 (60 B)
  Trainable Parameters: 15 (60 B)
  Trainable State: 0, (0 B)
>
```

```elixir
data = [{x_test, y_test}]

model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(data, trained_model_state)
```

<!-- livebook:{"output":true} -->

```
Batch: 0, accuracy: 0.9333333
```

<!-- livebook:{"output":true} -->

```
%{
  0 => %{
    "accuracy" => #Nx.Tensor<
      f32
      0.9333333373069763
    >
  }
}
```
